#!/bin/bash
# bash is required because we need bash's printf to guarantee a cross-platform
# timestamp format.

set -e
set -x

# make sure we're on a signed tag that matches the version name
versionName=`sed -n 's,.*versionName="\([^"]*\)".*,\1,p' AndroidManifest.xml`
describe=`git describe`
if [ $versionName != $describe ]; then
    echo "WARNING: building $describe, which is not the latest release ($versionName)"
else
    # make a clearer warning above by putting this here
    set +x
    echo ""
    echo ""
    echo "Checking git tag signature for release build:"
    git tag -v $versionName
    echo ""
    echo ""
    set -x
fi


if [ -z $ANDROID_HOME ]; then
    if [ -e ~/.android/bashrc ]; then
        . ~/.android/bashrc
    else
        echo "ANDROID_HOME must be set!"
        exit
    fi
fi

projectroot=`pwd`
projectname=`sed -n 's,.*name="app_name">\(.*\)<.*,\1,p' res/values/strings.xml`

# standardize timezone to reduce build differences
export TZ=UTC

git reset --hard
git clean -fdx
git submodule foreach git reset --hard
git submodule foreach git clean -fdx
git submodule sync
git submodule foreach git submodule sync
git submodule update --init


if [ -e ~/.android/ant.properties ]; then
    cp ~/.android/ant.properties $projectroot/
# TODO remove me once cacheword is updated to v0.1
    cat ~/.android/ant.properties >> $projectroot/external/cacheword/cachewordlib/ant.properties
else
    echo "skipping release ant.properties"
fi

./update-ant-build.sh
ant release

apk=$projectroot/bin/$projectname-v$describe.apk

if which gpg > /dev/null; then
    if [ -z "`gpg --list-secret-keys`" ]; then
        echo "No GPG secret keys found, not signing APK"
    else
        gpg --detach-sign $apk
    fi
else
    echo "gpg not found, not signing APK"
fi
